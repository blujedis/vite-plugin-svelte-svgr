{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";AAAA,SAAS,gBAAgB;AACzB,SAAS,eAAe;AACxB,SAAS,gBAA2D;AAGpE,SAAS,oBAAoB;AAE7B,IAAM,EAAE,SAAS,IAAI;AAErB,IAAM,gBAAgB;AACtB,IAAM,iBAAiB;AACvB,IAAM,gBAAgB;AACtB,IAAM,WAA0B;AAAA,EAC/B,MAAM;AACP;AACA,IAAM,gBAAiC;AAAA,EACtC,SAAS;AAAA,IACR;AAAA,MACC,MAAM;AAAA,MACN,QAAQ;AAAA,QACP,WAAW;AAAA,UACV,eAAe;AAAA,QAChB;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AAEA,IAAM,QAAQ,oBAAI,IAAI;AAOtB,SAAS,gBAAgB,MAAsB;AAC9C,QAAM,QAAQ,cAAc,KAAK,IAAI;AAErC,MAAI,CAAC;AAAO,UAAM,IAAI,MAAM,kCAAkC;AAE9D,QAAM,CAAC,EAAE,MAAM,IAAI,IAAI;AACvB,SAAO,GAAG,oBAAoB;AAC/B;AAMA,SAAS,YAAY,KAAqC;AACzD,SAAO,OAAO,QAAQ,YAAY,QAAQ,QAAQ,EAAE,UAAU;AAC/D;AAOA,SAAS,WAAW,OAAsB,EAAE,MAAM,YAAY,GAAW;AACxE,SAAO;AAAA,IACN,GAAG;AAAA,IACH,GAAG;AAAA,EACJ;AAEA,QAAM,iBAAiB,CAAC,CAAC,KAAK,QAAQ,OAAO,KAAK,SAAS;AAC3D,MAAI,cAAe,KAAK,QAAQ,CAAC;AACjC,gBAAc,gBAAgB,OAAO,EAAE,GAAG,cAAc,IAAI;AAE5D,MAAI;AAEJ,MAAI,KAAK,WAAW,KAAK;AACxB,aAAS,aAAa,KAAK,SAAS,KAAK,SAAS,EAAE,SAAS,KAAK,KAAK,CAAC;AAEzE,SAAO;AAAA,IACN,MAAM;AAAA,IAEN,MAAM,UAAU,KAAa,IAAY,SAAS;AACjD,YAAM,QAAQ,GAAG,MAAM,aAAa;AAGpC,UAAI,EAAE,SAAS,CAAC,GAAG,UAAW,UAAU,CAAC,OAAO,EAAE;AAAI,eAAO;AAE7D,YAAM,QAAQ,mCAAS;AAEvB,UAAI,OAAO;AAEV,cAAM,OAAQ,MAAM,MAAM,KAAK;AAG/B,YAAI,QAAQ,SAAS;AAAO,iBAAO;AAEnC,YAAI;AACH,gBAAM,UAAU,GAAG,MAAM;AACzB,gBAAM,SAAS,MAAM,IAAI,OAAO;AAEhC,cAAI;AAAQ,mBAAO;AAEnB,gBAAM,WAAW,GAAG,QAAQ,gBAAgB,MAAM;AAElD,cAAI,QAAQ,MAAM,SAAS,QAAQ,GAAG,SAAS,OAAO;AAEtD,gBAAM,YAAY,iBACf,SAAS,MAAM,EAAE,GAAG,aAAa,MAAM,SAAS,CAAC,IACjD,EAAE,KAAK;AAEV,cAAI,YAAY,SAAS,GAAG;AAC3B,oBAAQ,MAAM,iCAAiC,SAAS;AACxD,mBAAO;AAAA,UACR;AAGA,cAAI,SAAS,OAAO;AACnB,mBAAO;AAAA,mBAAsB,UAAU;AAAA,UACxC,OAGK;AACJ,sBAAU,OAAO,gBAAgB,UAAU,IAAI;AAE/C,kBAAM,EAAE,GAAG,IAAI,QAAQ,UAAU,MAAM;AAAA,cACtC,KAAK;AAAA,cACL,UAAU;AAAA,cACV,YAAY;AAAA,cACZ,WAAW;AAAA,cACX,UAAU,QAAQ,QAAQ;AAAA,YAC3B,CAAC;AAED,mBAAO,GAAG;AACV,mBAAO;AAAA,UACR;AAGA,gBAAM,IAAI,SAAS,IAAI;AAEvB,iBAAO;AAAA,QACR,SAAS,KAAP;AACD,gBAAM,EAAE,MAAM,IAAI;AAClB,gBAAM,UAAU,UAAU;AAC1B,kBAAQ,MAAM,GAAG;AAAA,EAAY,OAAO;AAAA,QACrC;AAAA,MACD;AAEA,aAAO;AAAA,IACR;AAAA,EACD;AACD;AAIA,IAAO,cAAQ","sourcesContent":["import { promises } from 'fs';\nimport { compile } from 'svelte/compiler';\nimport { optimize, type OptimizedError, type OptimizeOptions } from 'svgo';\nimport { Plugin } from 'vite';\nimport { PluginOptions, SvgType } from './types';\nimport { createFilter } from '@rollup/pluginutils';\n\nconst { readFile } = promises;\n\nconst SVG_PARTS_EXP = /(<svg.*?)(>.*)/s;\nconst SVG_SUFFIX_EXP = /\\.svg(\\?.*)$/;\nconst SVG_MATCH_EXP = /\\.svg(?:\\?(raw|url|component))?$/;\nconst DEFAULTS: PluginOptions = {\n\ttype: 'component'\n};\nconst SVGO_DEFAULTS: OptimizeOptions = {\n\tplugins: [\n\t\t{\n\t\t\tname: 'preset-default',\n\t\t\tparams: {\n\t\t\t\toverrides: {\n\t\t\t\t\tremoveViewBox: false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t]\n};\n\nconst cache = new Map();\n\n/**\n * Extends SVG with props.\n *\n * @param data the data to be extended with prop.\n */\nfunction extendWithProps(data: string): string {\n\tconst parts = SVG_PARTS_EXP.exec(data);\n\n\tif (!parts) throw new Error('Data is not a valid SVG element.');\n\n\tconst [, head, body] = parts;\n\treturn `${head} {...$$props}${body}`;\n}\n\n/**\n * If no data in payload then it is likely an Opti\n * @param err the error object to inspect as Optimize Error.\n */\nfunction isSVGOError(err: unknown): err is OptimizedError {\n\treturn typeof err === 'object' && err !== null && !('data' in err);\n}\n\n/**\n * Initializes the plugin instance.\n *\n * @param options vite plugin svelte svgr global options.\n */\nfunction initPlugin(opts: PluginOptions = { type: 'component' }): Plugin {\n\topts = {\n\t\t...DEFAULTS,\n\t\t...opts\n\t};\n\n\tconst shouldOptimize = !!opts.svgo || typeof opts.svgo === 'undefined';\n\tlet svgoOptions = (opts.svgo || {}) as OptimizeOptions;\n\tsvgoOptions = svgoOptions === true ? { ...SVGO_DEFAULTS } : svgoOptions;\n\n\tlet filter: ReturnType<typeof createFilter> | undefined;\n\n\tif (opts.include || opts.exclude)\n\t\tfilter = createFilter(opts.include, opts.exclude, { resolve: opts.root });\n\n\treturn {\n\t\tname: 'svelte-svgr',\n\n\t\tasync transform(src: string, id: string, options) {\n\t\t\tconst match = id.match(SVG_MATCH_EXP);\n\n\t\t\t// Not a match nothing to do.\n\t\t\tif (!(match || []).length || (filter && !filter(id))) return null;\n\n\t\t\tconst isSSR = options?.ssr;\n\n\t\t\tif (match) {\n\t\t\t\t// Defer to param type, fallback to type defined in options if any.\n\t\t\t\tconst type = (match[1] || opts.type) as SvgType;\n\n\t\t\t\t// Return the url of the SVG.\n\t\t\t\tif (type && type === 'url') return src;\n\n\t\t\t\ttry {\n\t\t\t\t\tconst cacheid = `${id}:${isSSR}`;\n\t\t\t\t\tconst cached = cache.get(cacheid);\n\n\t\t\t\t\tif (cached) return cached;\n\n\t\t\t\t\tconst filename = id.replace(SVG_SUFFIX_EXP, '.svg');\n\n\t\t\t\t\tlet data = (await readFile(filename)).toString('utf-8');\n\n\t\t\t\t\tconst optimized = shouldOptimize\n\t\t\t\t\t\t? optimize(data, { ...svgoOptions, path: filename })\n\t\t\t\t\t\t: { data };\n\n\t\t\t\t\tif (isSVGOError(optimized)) {\n\t\t\t\t\t\tconsole.error('Got optimize error from SVGO:', optimized);\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Return raw optimized SVG.\n\t\t\t\t\tif (type === 'raw') {\n\t\t\t\t\t\tdata = `\\nexport default \\`${optimized.data}\\`;`;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Default to componentized SVG.\n\t\t\t\t\telse {\n\t\t\t\t\t\toptimized.data = extendWithProps(optimized.data);\n\n\t\t\t\t\t\tconst { js } = compile(optimized.data, {\n\t\t\t\t\t\t\tcss: false,\n\t\t\t\t\t\t\tfilename: id,\n\t\t\t\t\t\t\thydratable: true,\n\t\t\t\t\t\t\tnamespace: 'svg',\n\t\t\t\t\t\t\tgenerate: isSSR ? 'ssr' : 'dom'\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tdelete js.map;\n\t\t\t\t\t\tdata = js;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Cache the optimized transformed SVG.\n\t\t\t\t\tcache.set(cacheid, data);\n\n\t\t\t\t\treturn data;\n\t\t\t\t} catch (err: unknown) {\n\t\t\t\t\tconst { stack } = err as Error;\n\t\t\t\t\tconst message = `SVG at ${id} could NOT be resolved. See stack below.`;\n\t\t\t\t\tconsole.error(`${message}\\n${stack}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t};\n}\n\nexport * from './types';\n\nexport default initPlugin;\n"]}